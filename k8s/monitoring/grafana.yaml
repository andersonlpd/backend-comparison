---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: backend-comparison
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-service:9090
      isDefault: true
    - name: InfluxDB
      type: influxdb
      access: proxy
      url: http://influxdb-service:8086
      database: jmeter
      user: admin
      password: admin123
      jsonData:
        version: Flux
        organization: backend-comparison
        defaultBucket: jmeter

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: backend-comparison
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      options:
        path: /etc/grafana/provisioning/dashboards

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: backend-comparison
data:
  python-metrics-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Python Backend Metrics",
        "tags": ["python", "fastapi"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "HTTP Requests Total",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"python-backend\"}[5m])",
                "legendFormat": "{{method}} {{handler}}"
              }
            ]
          },
          {
            "id": 2,
            "title": "HTTP Request Duration",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"python-backend\"}[5m]))",
                "legendFormat": "95th percentile"
              }
            ]
          },
          {
            "id": 3,
            "title": "CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{pod=~\"python-backend-.*\"}[5m])",
                "legendFormat": "{{pod}}"
              }
            ]
          },
          {
            "id": 4,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_working_set_bytes{pod=~\"python-backend-.*\"} / 1024 / 1024",
                "legendFormat": "{{pod}} (MB)"
              }
            ]
          }
        ],
        "time": {
          "from": "now-15m",
          "to": "now"
        },
        "refresh": "5s"
      }
    }
  node-metrics-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Node.js Backend Metrics",
        "tags": ["nodejs", "express"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "HTTP Requests Total",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"node-backend\"}[5m])",
                "legendFormat": "{{method}} {{route}}"
              }
            ]
          },
          {
            "id": 2,
            "title": "HTTP Request Duration",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"node-backend\"}[5m]))",
                "legendFormat": "95th percentile"
              }
            ]
          },
          {
            "id": 3,
            "title": "CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{pod=~\"node-backend-.*\"}[5m])",
                "legendFormat": "{{pod}}"
              }
            ]
          },
          {
            "id": 4,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_working_set_bytes{pod=~\"node-backend-.*\"} / 1024 / 1024",
                "legendFormat": "{{pod}} (MB)"
              }
            ]
          }
        ],
        "time": {
          "from": "now-15m",
          "to": "now"
        },
        "refresh": "5s"
      }
    }

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-pv
  namespace: backend-comparison
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/k8s-grafana-data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: backend-comparison
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: backend-comparison
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards/dashboards
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: backend-comparison
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-nodeport
  namespace: backend-comparison
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
    nodePort: 30005
  type: NodePort
