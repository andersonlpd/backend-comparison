#!/bin/bash

# Deploy script para todas as aplica√ß√µes no Kubernetes
set -e

CURRENT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLUSTER_NAME="backend-comparison"

echo "üöÄ Iniciando deploy das aplica√ß√µes no cluster Kubernetes..."

# Verificar se o cluster existe
if ! kind get clusters | grep -q "^${CLUSTER_NAME}$"; then
    echo "‚ùå Cluster ${CLUSTER_NAME} n√£o encontrado. Execute ./setup-kind.sh primeiro."
    exit 1
fi

# Configurar o contexto do kubectl
kubectl cluster-info --context kind-${CLUSTER_NAME}

echo "1Ô∏è‚É£ Criando namespace..."
kubectl apply -f "${CURRENT_DIR}/namespace/namespace.yaml"

echo "2Ô∏è‚É£ Deploying banco de dados PostgreSQL..."
kubectl apply -f "${CURRENT_DIR}/database/postgres.yaml"

echo "3Ô∏è‚É£ Aguardando PostgreSQL estar pronto..."
kubectl wait --for=condition=Ready pod -l app=postgres -n backend-comparison --timeout=300s

echo "4Ô∏è‚É£ Deploying monitoring stack..."
kubectl apply -f "${CURRENT_DIR}/monitoring/prometheus.yaml"
kubectl apply -f "${CURRENT_DIR}/monitoring/node-exporter.yaml"
kubectl apply -f "${CURRENT_DIR}/monitoring/cadvisor.yaml"
kubectl apply -f "${CURRENT_DIR}/monitoring/influxdb.yaml"
kubectl apply -f "${CURRENT_DIR}/monitoring/grafana.yaml"

echo "5Ô∏è‚É£ Aguardando servi√ßos de monitoramento estarem prontos..."
kubectl wait --for=condition=Ready pod -l app=prometheus -n backend-comparison --timeout=300s
kubectl wait --for=condition=Ready pod -l app=influxdb -n backend-comparison --timeout=300s
kubectl wait --for=condition=Ready pod -l app=grafana -n backend-comparison --timeout=300s

echo "6Ô∏è‚É£ Deploying backends Python e Node.js..."
kubectl apply -f "${CURRENT_DIR}/backends/python-backend.yaml"
kubectl apply -f "${CURRENT_DIR}/backends/node-backend.yaml"

echo "7Ô∏è‚É£ Aguardando backends estarem prontos..."
kubectl wait --for=condition=Ready pod -l app=python-backend -n backend-comparison --timeout=300s
kubectl wait --for=condition=Ready pod -l app=node-backend -n backend-comparison --timeout=300s

echo "8Ô∏è‚É£ Configurando InfluxDB para JMeter..."
# Executar script de configura√ß√£o do InfluxDB
"${CURRENT_DIR}/configure-influxdb.sh"

echo "‚úÖ Deploy conclu√≠do com sucesso!"
echo ""
echo "üîç Validando ambiente..."
"${CURRENT_DIR}/validate.sh"
echo ""
echo "üéØ Verificando status dos pods..."
kubectl get pods -n backend-comparison

echo ""
echo "üìä Servi√ßos dispon√≠veis:"
echo "   - Python Backend: http://localhost:30001"
echo "   - Node.js Backend: http://localhost:30002"  
echo "   - Prometheus: http://localhost:30003"
echo "   - InfluxDB: http://localhost:30004"
echo "   - Grafana: http://localhost:30005 (admin/admin)"
echo ""
echo "üß™ Para executar testes JMeter:"
echo "   kubectl create job jmeter-python-test-\$(date +%s) --from=job/jmeter-python-test -n backend-comparison"
echo "   kubectl create job jmeter-node-test-\$(date +%s) --from=job/jmeter-node-test -n backend-comparison"
echo ""
echo "üîç Para monitorar:"
echo "   kubectl get pods -n backend-comparison -w"
echo "   kubectl logs -f deployment/python-backend -n backend-comparison"
echo "   kubectl logs -f deployment/node-backend -n backend-comparison"
